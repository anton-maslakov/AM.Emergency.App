<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StructureMap.Web.1.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions">
            <summary>Тип оболочки совместимости для StructureMap.Web.CreatePluginFamilyExpressionExtensions</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions.HttpContextScopedOf1CreatePluginFamilyExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression{``0},StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression{``0}})">
            <summary>Задает оболочка совместимости CreatePluginFamilyExpressionExtensions.HttpContextScoped(CreatePluginFamilyExpression`1&lt;!!0&gt; source)</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimCreatePluginFamilyExpressionExtensions.HybridHttpOrThreadLocalScopedOf1CreatePluginFamilyExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression{``0},StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression{``0}})">
            <summary>Задает оболочка совместимости CreatePluginFamilyExpressionExtensions.HybridHttpOrThreadLocalScoped(CreatePluginFamilyExpression`1&lt;!!0&gt; source)</summary>
        </member>
        <member name="T:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions">
            <summary>Тип оболочки совместимости для StructureMap.Web.GenericFamilyExpressionExtensions</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions.HttpContextScopedGenericFamilyExpression">
            <summary>Задает оболочка совместимости GenericFamilyExpressionExtensions.HttpContextScoped(GenericFamilyExpression expression)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimGenericFamilyExpressionExtensions.HybridHttpOrThreadLocalScopedGenericFamilyExpression">
            <summary>Задает оболочка совместимости GenericFamilyExpressionExtensions.HybridHttpOrThreadLocalScoped(GenericFamilyExpression expression)</summary>
        </member>
        <member name="T:StructureMap.Web.Fakes.ShimSessionWrapper">
            <summary>Тип оболочки совместимости для StructureMap.Web.SessionWrapper</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.#ctor(StructureMap.Web.SessionWrapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AddObjectObject">
            <summary>Задает оболочка совместимости SessionWrapper.Add(Object key, Object value)</summary>
        </member>
        <member name="T:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.AddObjectObject">
            <summary>Задает оболочка совместимости SessionWrapper.Add(Object key, Object value)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.Clear">
            <summary>Задает оболочка совместимости SessionWrapper.Clear()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.ContainsObject">
            <summary>Задает оболочка совместимости SessionWrapper.Contains(Object key)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.CopyToArrayInt32">
            <summary>Задает оболочка совместимости SessionWrapper.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.CountGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_Count()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.GetEnumerator">
            <summary>Задает оболочка совместимости SessionWrapper.GetEnumerator()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.IsFixedSizeGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_IsFixedSize()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.IsReadOnlyGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_IsReadOnly()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.IsSynchronizedGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_IsSynchronized()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.ItemGetObject">
            <summary>Задает оболочка совместимости SessionWrapper.get_Item(Object key)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.ItemSetObjectObject">
            <summary>Задает оболочка совместимости SessionWrapper.set_Item(Object key, Object value)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.KeysGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_Keys()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.RemoveObject">
            <summary>Задает оболочка совместимости SessionWrapper.Remove(Object key)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.SyncRootGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_SyncRoot()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости SessionWrapper.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.AllInstances.ValuesGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_Values()</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.Bind(System.Collections.ICollection)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.Bind(System.Collections.IDictionary)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimSessionWrapper.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.Clear">
            <summary>Задает оболочка совместимости SessionWrapper.Clear()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.ConstructorHttpSessionState">
            <summary>Задает оболочка совместимости SessionWrapper.SessionWrapper(HttpSessionState session)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.ContainsObject">
            <summary>Задает оболочка совместимости SessionWrapper.Contains(Object key)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.CopyToArrayInt32">
            <summary>Задает оболочка совместимости SessionWrapper.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.CountGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_Count()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.GetEnumerator">
            <summary>Задает оболочка совместимости SessionWrapper.GetEnumerator()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.IsFixedSizeGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_IsFixedSize()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.IsReadOnlyGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_IsReadOnly()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.IsSynchronizedGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_IsSynchronized()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.ItemGetObject">
            <summary>Задает оболочка совместимости SessionWrapper.get_Item(Object key)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.ItemSetObjectObject">
            <summary>Задает оболочка совместимости SessionWrapper.set_Item(Object key, Object value)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.KeysGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_Keys()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.RemoveObject">
            <summary>Задает оболочка совместимости SessionWrapper.Remove(Object key)</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.SyncRootGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_SyncRoot()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости SessionWrapper.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimSessionWrapper.ValuesGet">
            <summary>Задает оболочка совместимости SessionWrapper.get_Values()</summary>
        </member>
        <member name="T:StructureMap.Web.Fakes.ShimWebLifecycles">
            <summary>Тип оболочки совместимости для StructureMap.Web.WebLifecycles</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimWebLifecycles.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimWebLifecycles.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.ShimWebLifecycles.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimWebLifecycles.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.ShimWebLifecycles.StaticConstructor">
            <summary>Задает оболочка совместимости WebLifecycles.WebLifecycles()</summary>
        </member>
        <member name="T:StructureMap.Web.Fakes.StubSessionWrapper">
            <summary>Тип заглушки StructureMap.Web.SessionWrapper</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.StubSessionWrapper.#ctor(System.Web.SessionState.HttpSessionState)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.StubSessionWrapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:StructureMap.Web.Fakes.StubSessionWrapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSessionWrapper</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.StubSessionWrapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:StructureMap.Web.Fakes.StubSessionWrapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle">
            <summary>Тип оболочки совместимости для StructureMap.Web.Pipeline.HttpContextLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.#ctor(StructureMap.Web.Pipeline.HttpContextLifecycle)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.AllInstances.EjectAllILifecycleContext">
            <summary>Задает оболочка совместимости HttpContextLifecycle.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.AllInstances.FindCacheILifecycleContext">
            <summary>Задает оболочка совместимости HttpContextLifecycle.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.AllInstances.findHttpDictionary">
            <summary>Задает оболочка совместимости HttpContextLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.Bind(StructureMap.Pipeline.ILifecycle)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.Constructor">
            <summary>Задает оболочка совместимости HttpContextLifecycle.HttpContextLifecycle()</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.DisposeAndClearAll">
            <summary>Задает оболочка совместимости HttpContextLifecycle.DisposeAndClearAll()</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.EjectAllILifecycleContext">
            <summary>Задает оболочка совместимости HttpContextLifecycle.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.FindCacheILifecycleContext">
            <summary>Задает оболочка совместимости HttpContextLifecycle.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.HasContext">
            <summary>Задает оболочка совместимости HttpContextLifecycle.HasContext()</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.StaticConstructor">
            <summary>Задает оболочка совместимости HttpContextLifecycle.HttpContextLifecycle()</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpContextLifecycle.findHttpDictionary">
            <summary>Задает оболочка совместимости HttpContextLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2">
            <summary>Тип оболочки совместимости для StructureMap.Web.Pipeline.HttpLifecycleBase`2</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.#ctor(StructureMap.Web.Pipeline.HttpLifecycleBase{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.AllInstances.EjectAllILifecycleContext">
            <summary>Задает оболочка совместимости HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.AllInstances.FindCacheILifecycleContext">
            <summary>Задает оболочка совместимости HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.Bind(StructureMap.Pipeline.ILifecycle)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.Constructor">
            <summary>Задает оболочка совместимости HttpLifecycleBase`2.HttpLifecycleBase`2()</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.EjectAllILifecycleContext">
            <summary>Задает оболочка совместимости HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpLifecycleBase`2.FindCacheILifecycleContext">
            <summary>Задает оболочка совместимости HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle">
            <summary>Тип оболочки совместимости для StructureMap.Web.Pipeline.HttpSessionLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.#ctor(StructureMap.Web.Pipeline.HttpSessionLifecycle)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.AllInstances.findHttpDictionary">
            <summary>Задает оболочка совместимости HttpSessionLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.Bind(StructureMap.Pipeline.ILifecycle)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.Constructor">
            <summary>Задает оболочка совместимости HttpSessionLifecycle.HttpSessionLifecycle()</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHttpSessionLifecycle.findHttpDictionary">
            <summary>Задает оболочка совместимости HttpSessionLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle">
            <summary>Тип оболочки совместимости для StructureMap.Web.Pipeline.HybridLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.#ctor(StructureMap.Web.Pipeline.HybridLifecycle)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.Bind(StructureMap.Pipeline.ILifecycle)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHybridLifecycle.Constructor">
            <summary>Задает оболочка совместимости HybridLifecycle.HybridLifecycle()</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle">
            <summary>Тип оболочки совместимости для StructureMap.Web.Pipeline.HybridSessionLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.#ctor(StructureMap.Web.Pipeline.HybridSessionLifecycle)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.Bind(StructureMap.Pipeline.ILifecycle)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.ShimHybridSessionLifecycle.Constructor">
            <summary>Задает оболочка совместимости HybridSessionLifecycle.HybridSessionLifecycle()</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle">
            <summary>Тип заглушки StructureMap.Web.Pipeline.HttpContextLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.EjectAll(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpContextLifecycle.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.EjectAllILifecycleContext">
            <summary>Задает stub HttpContextLifecycle.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.FindCache(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpContextLifecycle.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.FindCacheILifecycleContext">
            <summary>Задает stub HttpContextLifecycle.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.FindHttpDictionary">
            <summary>Задает stub HttpContextLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHttpContextLifecycle</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpContextLifecycle.findHttpDictionary">
            <summary>Задает заглушка HttpContextLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2">
            <summary>Тип заглушки StructureMap.Web.Pipeline.HttpLifecycleBase`2</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.EjectAll(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.EjectAllILifecycleContext">
            <summary>Задает stub HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.FindCache(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.FindCacheILifecycleContext">
            <summary>Задает stub HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHttpLifecycleBase</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpLifecycleBase`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle">
            <summary>Тип заглушки StructureMap.Web.Pipeline.HttpSessionLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.EjectAll(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpContextLifecycle.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.EjectAllILifecycleContext">
            <summary>Задает stub HttpContextLifecycle.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.FindCache(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpContextLifecycle.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.FindCacheILifecycleContext">
            <summary>Задает stub HttpContextLifecycle.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.FindHttpDictionary">
            <summary>Задает stub HttpSessionLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHttpSessionLifecycle</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHttpSessionLifecycle.findHttpDictionary">
            <summary>Задает заглушка HttpSessionLifecycle.findHttpDictionary()</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle">
            <summary>Тип заглушки StructureMap.Web.Pipeline.HybridLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.EjectAll(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.EjectAllILifecycleContext">
            <summary>Задает stub HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.FindCache(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.FindCacheILifecycleContext">
            <summary>Задает stub HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHybridLifecycle</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHybridLifecycle.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle">
            <summary>Тип заглушки StructureMap.Web.Pipeline.HybridSessionLifecycle</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.EjectAll(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.EjectAllILifecycleContext">
            <summary>Задает stub HttpLifecycleBase`2.EjectAll(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.FindCache(StructureMap.ILifecycleContext)">
            <summary>Задает заглушка HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="F:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.FindCacheILifecycleContext">
            <summary>Задает stub HttpLifecycleBase`2.FindCache(ILifecycleContext context)</summary>
        </member>
        <member name="M:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHybridSessionLifecycle</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:StructureMap.Web.Pipeline.Fakes.StubHybridSessionLifecycle.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
    </members>
</doc>
